/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Modelo.ExtensionesFicheros;
import Controlador.ControladorBackUp;
import Modelo.FileFilters.FiltroFileDirectorio;
import Modelo.FileFilters.FiltroFileExtension;
import Modelo.MyExceptions;
import Modelo.TableModels.BackUp;
import Modelo.TableModels.FicheroCopia;
import Modelo.OperacionesFicheros;
import java.awt.Color;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
/**
 *
 * @author rodrigo valdes
 */
public class PantallaPrincipal extends javax.swing.JFrame {
    private ControladorBackUp controlador;
    private BackUp backup;
    private File rutaRaizPendrive = new File("ubicacion.txt/../..");

    // Necesitamos el getter del controlador para acceder a su información desde la pantalla de mostrar backups
    public ControladorBackUp getControlador() {
        return controlador;
    }

    // Necesitamos el getter del backup para acceder a su información desde la pantalla de progreso
    public BackUp getBackup() {
        return backup;
    }

    public JRadioButton getjRadioButton_siCategorias() {
        return jRadioButton_siCategorias;
    }


    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        
          try {
            controlador = new ControladorBackUp();
        } catch (IOException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        backup = new BackUp(); 
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jL_titulo = new javax.swing.JLabel();
        jL_seleccionado = new javax.swing.JLabel();
        jB_hacerBackup = new javax.swing.JButton();
        jCheckBox_imagen = new javax.swing.JCheckBox();
        jL_agruparCategorias = new javax.swing.JLabel();
        jCheckBox_video = new javax.swing.JCheckBox();
        jRadioButton_siCategorias = new javax.swing.JRadioButton();
        jCheckBox_textos = new javax.swing.JCheckBox();
        jRadioButton_noCategorias = new javax.swing.JRadioButton();
        jCheckBox_todo = new javax.swing.JCheckBox();
        jCheckBox_pdf = new javax.swing.JCheckBox();
        jCheckBox_comprimidos = new javax.swing.JCheckBox();
        jB_seleccionarDirectorio = new javax.swing.JButton();
        jCheckBox_audio = new javax.swing.JCheckBox();
        jTextField_nombre = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_ver = new javax.swing.JMenu();
        jMenuItem_verBackups = new javax.swing.JMenuItem();
        jMenuItem_espacioDiscos = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jL_titulo.setFont(new java.awt.Font("Cambria", 3, 48)); // NOI18N
        jL_titulo.setForeground(new java.awt.Color(51, 0, 0));
        jL_titulo.setText("USB-BACKUP");

        jL_seleccionado.setFont(new java.awt.Font("Calibri Light", 2, 14)); // NOI18N
        jL_seleccionado.setForeground(new java.awt.Color(0, 102, 153));
        jL_seleccionado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_seleccionado.setText("Ningún directorio seleccionado");

        jB_hacerBackup.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jB_hacerBackup.setForeground(new java.awt.Color(51, 51, 51));
        jB_hacerBackup.setText("Hacer BackUp");
        jB_hacerBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_hacerBackupActionPerformed(evt);
            }
        });

        jCheckBox_imagen.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_imagen.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_imagen.setText("Imagen");
        jCheckBox_imagen.setToolTipText(".jpg .png .gif ...");
        jCheckBox_imagen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jCheckBox_imagen.setName(""); // NOI18N
        jCheckBox_imagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_imagenActionPerformed(evt);
            }
        });

        jL_agruparCategorias.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jL_agruparCategorias.setForeground(new java.awt.Color(0, 102, 153));
        jL_agruparCategorias.setText("¿Agrupar por categorías?");

        jCheckBox_video.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_video.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_video.setText("Video");
        jCheckBox_video.setToolTipText(".mkv .wav ...");
        jCheckBox_video.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_videoActionPerformed(evt);
            }
        });

        jRadioButton_siCategorias.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jRadioButton_siCategorias.setForeground(new java.awt.Color(0, 102, 153));
        jRadioButton_siCategorias.setText("Sí");

        jCheckBox_textos.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_textos.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_textos.setText("Documentos de texto");
        jCheckBox_textos.setToolTipText(".txt .doc .docx .odt ...");
        jCheckBox_textos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_textosActionPerformed(evt);
            }
        });

        jRadioButton_noCategorias.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jRadioButton_noCategorias.setForeground(new java.awt.Color(0, 102, 153));
        jRadioButton_noCategorias.setSelected(true);
        jRadioButton_noCategorias.setText("No");

        jCheckBox_todo.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_todo.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_todo.setText("Todos");
        jCheckBox_todo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_todoActionPerformed(evt);
            }
        });

        jCheckBox_pdf.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_pdf.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_pdf.setText("PDF");
        jCheckBox_pdf.setToolTipText(".pdf");
        jCheckBox_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_pdfActionPerformed(evt);
            }
        });

        jCheckBox_comprimidos.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_comprimidos.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_comprimidos.setText("Comprimidos");
        jCheckBox_comprimidos.setToolTipText(".rar .zip .7z ...");
        jCheckBox_comprimidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_comprimidosActionPerformed(evt);
            }
        });

        jB_seleccionarDirectorio.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jB_seleccionarDirectorio.setForeground(new java.awt.Color(51, 51, 51));
        jB_seleccionarDirectorio.setText("Seleccionar directorio");
        jB_seleccionarDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_seleccionarDirectorioActionPerformed(evt);
            }
        });

        jCheckBox_audio.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jCheckBox_audio.setForeground(new java.awt.Color(0, 102, 153));
        jCheckBox_audio.setText("Audio");
        jCheckBox_audio.setToolTipText(".mp3 .mp4 .m4a ...");
        jCheckBox_audio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_audioActionPerformed(evt);
            }
        });

        jTextField_nombre.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jTextField_nombre.setForeground(new java.awt.Color(204, 204, 204));
        jTextField_nombre.setText("Nombre / Descripción");
        jTextField_nombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_nombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField_nombreFocusLost(evt);
            }
        });

        jMenu_ver.setText("Ver");

        jMenuItem_verBackups.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_verBackups.setText("BackUps...");
        jMenuItem_verBackups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_verBackupsActionPerformed(evt);
            }
        });
        jMenu_ver.add(jMenuItem_verBackups);

        jMenuItem_espacioDiscos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_espacioDiscos.setText("Espacio disponible...");
        jMenuItem_espacioDiscos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_espacioDiscosActionPerformed(evt);
            }
        });
        jMenu_ver.add(jMenuItem_espacioDiscos);

        jMenuBar1.add(jMenu_ver);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox_imagen)
                                    .addComponent(jCheckBox_pdf))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox_todo)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox_comprimidos)
                                            .addComponent(jCheckBox_video))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox_audio)
                                            .addComponent(jCheckBox_textos)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jL_agruparCategorias)
                                .addGap(43, 43, 43)
                                .addComponent(jRadioButton_siCategorias)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton_noCategorias))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jB_seleccionarDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                            .addComponent(jB_hacerBackup))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField_nombre)
                                .addComponent(jL_seleccionado, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)))))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jL_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jL_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox_video)
                    .addComponent(jCheckBox_audio)
                    .addComponent(jCheckBox_imagen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox_pdf)
                    .addComponent(jCheckBox_comprimidos)
                    .addComponent(jCheckBox_textos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox_todo)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_agruparCategorias)
                    .addComponent(jRadioButton_siCategorias)
                    .addComponent(jRadioButton_noCategorias))
                .addGap(23, 23, 23)
                .addComponent(jTextField_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jL_seleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_seleccionarDirectorio)
                    .addComponent(jB_hacerBackup))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_hacerBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_hacerBackupActionPerformed
        // Si no se ha seleccionado directorio para copiar se muestra un mensaje de error
        if (backup.getConfiguracion().getDirectorioOrigen() == null) {
            JOptionPane.showMessageDialog(this, "No hay ningún directorio seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (generarListaExtensiones() == null) {
                JOptionPane.showMessageDialog(this, "Selecciona al menos un tipo de archivo", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    // Si no queda suficiente espacio en disco, lanzamos una exception advirtiéndolo
                    if (OperacionesFicheros.tamanhoDirectorio(backup.getConfiguracion().getDirectorioOrigen()) > OperacionesFicheros.espacioLibre(rutaRaizPendrive)) {
                        throw new MyExceptions.EspacioInsuficiente();
                    }

                    // RELIZAMOS EL BACKUP EN LA PANTALLA DE PROGRESO
                    PantallaProgreso pantallaProgreso = new PantallaProgreso(this, true); // La hacemos modal
                    pantallaProgreso.setVisible(true);

                    /*
                    // EJECUTAMOS EL BACKUP
                    // El directorio destino será ruta_destino/nombre_directorio_origen_FECHA_Y_HORA para que no se pisen dos backups del mismo directorio
                    File directorioOrigen = backup.getConfiguracion().getDirectorioOrigen();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
                    String fechaFormateada = dateFormat.format(backup.getFecha());
                    String rutaDestino = backup.getConfiguracion().getDirectorioDestino().getCanonicalPath() + File.separator + directorioOrigen.getName() + fechaFormateada;
                    File directorioDestino = new File(rutaDestino);
                    directorioDestino.mkdir(); // HAY QUE CREAR LA CARPETA PADRE QUE LOS CONTENDRÁ A TODOS
                    backup.setNombreDirectorioCreado(rutaDestino);
                    // Hacemos el copiado
                    List<FicheroCopia> ficherosCopiados = OperacionesFicheros.copiarFicheros(directorioOrigen, directorioDestino, filtro);
                    backup.setListaFicherosCopiados(ficherosCopiados);

                    // AGRUPAMOS POR CATEGORÍA SI PROCEDE
                    if (jRadioButton_siCategorias.isSelected()) {
                        List<File> ficherosMovidos = agruparPorCategorias(directorioDestino);
                        // Al mover los ficheros de ubicación, deberemos actualizar la lista de ficheros copiados
                        // pues cambiamos la ruta en que se encuentran y quedan registrados con la ruta original de copiado,
                        // para restaurar los archivos deben tener la ubicación real
                        for (File ficheroMovido : ficherosMovidos) {
                            // Para buscarlo en la colección debe ser de nuestra clase FicheroCopia, que implementa el @equals sobreescrito
                            FicheroCopia ficheroMovidoParaComparar = new FicheroCopia(ficheroMovido.getCanonicalPath());
                            int posicionFicheroMovido = backup.getListaFicherosCopiados().indexOf(ficheroMovidoParaComparar);
                            FicheroCopia ficheroCopiado = backup.getListaFicherosCopiados().get(posicionFicheroMovido);
                            // FicheroCopia con la ruta en que se encuentra actualizada, lo sustituimos por el antiguo
                            FicheroCopia ficheroCopiaActualizado = new FicheroCopia(ficheroMovido.getCanonicalPath(), ficheroCopiado.getRutaOrigen());
                            backup.getListaFicherosCopiados().add(ficheroCopiaActualizado);
                            backup.getListaFicherosCopiados().remove(ficheroCopiado);
                        }
                        // Borramos los directorios que hayan podido qyuedar vacíos
                        OperacionesFicheros.eliminarDirectoriosVacios(directorioDestino);
                    }
                    */
                    /*
                    // TRAS HACER EL BACKUP, LO REGISTRAMOS EN EL CONTROLADOR Y ACTUALIZAMOS EL REGISTRO DE BACKUPS HECHOS PARA QUE NOS LO GUARDE
                    boolean exito = false;
                    controlador.getListaBackUps().add(backup);
                    exito = controlador.actualizarRegistroBackups();

                    // MOSTRAMOS UN MENSAJE PARA AVISAR AL USUARIO DE CÓMO HA SALIDO LA OPERACIÓN
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "Backup realizado con éxito", "Terminado", JOptionPane.INFORMATION_MESSAGE);
                    }
                    */
                    // Reiniciamos los campos de configuración
                    restaurarSeleccionados();
                    // Reiniciamos también el objeto backup
                    backup = new BackUp();

                } catch (IOException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MyExceptions.EspacioInsuficiente ex) {
                    JOptionPane.showMessageDialog(this, "No queda suficiente espacio en disco.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jB_hacerBackupActionPerformed

    private void jCheckBox_imagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_imagenActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_imagen.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_imagenActionPerformed

    private void jCheckBox_videoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_videoActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_video.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_videoActionPerformed

    private void jCheckBox_textosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_textosActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_textos.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_textosActionPerformed

    private void jCheckBox_todoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_todoActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_audio.setSelected(true);
            jCheckBox_comprimidos.setSelected(true);
            jCheckBox_imagen.setSelected(true);
            jCheckBox_pdf.setSelected(true);
            jCheckBox_textos.setSelected(true);
            jCheckBox_video.setSelected(true);
        } else {
            jCheckBox_audio.setSelected(false);
            jCheckBox_comprimidos.setSelected(false);
            jCheckBox_imagen.setSelected(false);
            jCheckBox_pdf.setSelected(false);
            jCheckBox_textos.setSelected(false);
            jCheckBox_video.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox_todoActionPerformed

    private void jCheckBox_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_pdfActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_pdf.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_pdfActionPerformed

    private void jCheckBox_comprimidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_comprimidosActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_comprimidos.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_comprimidosActionPerformed

    private void jB_seleccionarDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_seleccionarDirectorioActionPerformed
       backup = new BackUp();
        // Creamos un elemento para elegir archivos, se abrirá como una ventana
        JFileChooser jfileChooser = new JFileChooser();
        // Le asignamos un modo de selección de los ficheros que te va a ofrecer para elegir: sólo directorios
        jfileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // Va a devolver un resultado int en función de si pulsamos aceptar o cancelar
        int resultado = jfileChooser.showSaveDialog(this);
        // Según si aceptamos o cancelamos:
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File directorioElegido = jfileChooser.getSelectedFile();
            // Si el directorio elegido está vacío, salta exception
            try {
                if (directorioElegido.list().length == 0) {
                    throw new MyExceptions.DirectorioVacio();
                } else {
                    backup.getConfiguracion().setDirectorioOrigen(directorioElegido);
                    // Lo mostramos, adaptando el tamaño
                    jL_seleccionado.setText(adaptarLengthRuta(directorioElegido.getAbsolutePath()));
                }

            } catch (MyExceptions.DirectorioVacio ex) {
                JOptionPane.showMessageDialog(this, "El directorio elegido no tiene contenido,\npor favor seleccione otro.", "ERROR", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (resultado == JFileChooser.CANCEL_OPTION) {
               backup.getConfiguracion().setDirectorioOrigen(null);
                jL_seleccionado.setText("Ningún directorio seleccionado");
            }
        }
    }//GEN-LAST:event_jB_seleccionarDirectorioActionPerformed

    private void jCheckBox_audioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_audioActionPerformed
        if (jCheckBox_todo.isSelected()) {
            jCheckBox_audio.setSelected(true);
        }
    }//GEN-LAST:event_jCheckBox_audioActionPerformed

    private void jTextField_nombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_nombreFocusGained
        if (jTextField_nombre.getText().equalsIgnoreCase("Nombre / Descripción")) {
            jTextField_nombre.setText("");
            jTextField_nombre.setForeground(Color.black);
        }
    }//GEN-LAST:event_jTextField_nombreFocusGained

    private void jTextField_nombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_nombreFocusLost
        if (jTextField_nombre.getText().equalsIgnoreCase("")) {
            jTextField_nombre.setText("Nombre / Descripción");
            jTextField_nombre.setForeground(Color.LIGHT_GRAY);
        }
    }//GEN-LAST:event_jTextField_nombreFocusLost

    private void jMenuItem_verBackupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_verBackupsActionPerformed
        MostrarBackups pantallaBackups = new MostrarBackups(this, false);
        pantallaBackups.setVisible(true);
    }//GEN-LAST:event_jMenuItem_verBackupsActionPerformed

    private void jMenuItem_espacioDiscosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_espacioDiscosActionPerformed
        double espacioLibre = OperacionesFicheros.espacioLibre(rutaRaizPendrive);
        double espacioTotal = OperacionesFicheros.espacioTotal(rutaRaizPendrive);
        DecimalFormat decimalFormat = new DecimalFormat("#,000.00GB");
        String espacioLibreFormateado = decimalFormat.format(espacioLibre);
        String espacioTotalFormateado = decimalFormat.format(espacioTotal);
        JOptionPane.showMessageDialog(this, "Quedan " + espacioLibreFormateado + " libres de " + espacioTotalFormateado, "", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem_espacioDiscosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }
      public List<String> generarListaExtensiones() {
       List<String> listaExtensionesSeleccionadas = null;
        // Si está seleccionado todos
        if (jCheckBox_todo.isSelected()) {
            listaExtensionesSeleccionadas = new ArrayList<>();
          } else {
            // Si no está seleccionado todos, comprobamos uno por uno y añadimos las listas al filtro
            if (jCheckBox_audio.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesAudio());
            }
            if (jCheckBox_comprimidos.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesComprimidos());
            }
            if (jCheckBox_imagen.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesImagen());
            }
            if (jCheckBox_pdf.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesPDF());
            }
            if (jCheckBox_textos.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesTexto());
            }
            if (jCheckBox_video.isSelected()) {
                listaExtensionesSeleccionadas = new ArrayList<>();
                listaExtensionesSeleccionadas.addAll(ExtensionesFicheros.extensionesVideo());
            }
        }
        return listaExtensionesSeleccionadas;
    }

    public List<File> agruparPorCategorias(File directorio) throws IOException {
        List<File> ficherosMovidos = new ArrayList<>();
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesAudio(), "AUDIO"));
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesComprimidos(), "COMPRIMIDOS"));
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesImagen(), "IMAGEN"));
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesPDF(), "PDF"));
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesTexto(), "TEXTO"));
        ficherosMovidos.addAll(OperacionesFicheros.agruparPorCategoria(directorio, ExtensionesFicheros.extensionesVideo(), "VIDEO"));
        return ficherosMovidos;
    }

    public FileFilter generarFiltroExtensiones(List<String> listaExtensiones) {
        FiltroFileExtension filtro;
        // Si la lista está vacía, el filtro=null para que copie todo
        if (listaExtensiones.size() == 0) {
            filtro = null;
        } else {
            filtro = new FiltroFileExtension(listaExtensiones);
        }
        return filtro;
    }

    public void checkearValoresBackup() {
        // Si no se ha seleccionado directorio para copiar se muestra un mensaje de error
        if (backup.getConfiguracion().getDirectorioOrigen() == null) {
            JOptionPane.showMessageDialog(this, "No hay ningún directorio seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // ALMACENAMOS LOS PARÁMETROS DE CONFIGURACIÓN DEL BACKUP
            // Fecha (la del sistema en el momento de hacer el backup)
            backup.setFecha(GregorianCalendar.getInstance().getTime());
            // Nombre o descripción
            if (!jTextField_nombre.getText().equalsIgnoreCase("Nombre / Descripción")) {
                backup.setNombre(jTextField_nombre.getText());
            }
            // Lista de extensiones
            backup.getConfiguracion().getListaExtensiones().addAll(generarListaExtensiones());
        }
    }

    public void restaurarSeleccionados() {
        jCheckBox_audio.setSelected(false);
        jCheckBox_comprimidos.setSelected(false);
        jCheckBox_imagen.setSelected(false);
        jCheckBox_pdf.setSelected(false);
        jCheckBox_textos.setSelected(false);
        jCheckBox_video.setSelected(false);
        jCheckBox_todo.setSelected(false);
        jL_seleccionado.setText("Ningún directorio seleccionado");
        jRadioButton_noCategorias.setSelected(true);
        jTextField_nombre.setText("Nombre / Descripción");
        jTextField_nombre.setForeground(Color.lightGray);
    }

    public String adaptarLengthRuta(String ruta) {
        String rutaAdaptada = ruta;

        if (rutaAdaptada.length() > 70) {
            String inicio = "";
            String fin = "";
            for (int i = 0; i < 2; i++) {
                inicio = inicio + rutaAdaptada.substring(0, rutaAdaptada.indexOf("\\") + 1);
                rutaAdaptada = rutaAdaptada.substring(rutaAdaptada.indexOf("\\") + 1);
            }
            for (int i = 0; i < 2; i++) {
                fin = rutaAdaptada.substring(rutaAdaptada.lastIndexOf("\\")) + fin;
                rutaAdaptada = rutaAdaptada.substring(0, rutaAdaptada.lastIndexOf("\\") - 1);
            }
            rutaAdaptada = inicio + "..." + fin;
        }
        return rutaAdaptada;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_hacerBackup;
    private javax.swing.JButton jB_seleccionarDirectorio;
    private javax.swing.JCheckBox jCheckBox_audio;
    private javax.swing.JCheckBox jCheckBox_comprimidos;
    private javax.swing.JCheckBox jCheckBox_imagen;
    private javax.swing.JCheckBox jCheckBox_pdf;
    private javax.swing.JCheckBox jCheckBox_textos;
    private javax.swing.JCheckBox jCheckBox_todo;
    private javax.swing.JCheckBox jCheckBox_video;
    private javax.swing.JLabel jL_agruparCategorias;
    private javax.swing.JLabel jL_seleccionado;
    private javax.swing.JLabel jL_titulo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_espacioDiscos;
    private javax.swing.JMenuItem jMenuItem_verBackups;
    private javax.swing.JMenu jMenu_ver;
    private javax.swing.JRadioButton jRadioButton_noCategorias;
    private javax.swing.JRadioButton jRadioButton_siCategorias;
    private javax.swing.JTextField jTextField_nombre;
    // End of variables declaration//GEN-END:variables
}
